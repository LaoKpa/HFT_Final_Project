# -*- coding: utf-8 -*-
"""backtest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CqblE6AhPJnaUOWbGsHF2b9l_zpsw4w1
"""

import pandas as pd
import numpy as np
import datetime

def calculate_backtest_return(BO_spread,TTE,signal,data):
  backtest = pd.concat([data,signal],axis = 1).dropna()
  backtest['Price_pre'] = backtest['Price'].shift()
  backtest['signal_pre'] = backtest['signal'].shift()
  backtest['signal_pre_pre'] = backtest['signal_pre'].shift()
  backtest.dropna(inplace = True)
  backtest['return'] = ((backtest['Price'] - backtest['Price_pre'])/backtest['Price_pre'])*backtest['signal_pre']-np.abs(backtest['signal_pre']-backtest['signal_pre_pre'])*BO_spread/2/backtest['Price_pre']
  return backtest['return']

class backtesting():
  def __init__(self,BO_spread,TTE,signal,data,r_f=0):
    self.r_f = r_f
    self.BO_spread = BO_spread
    self.TTE = TTE
    self.signal = signal
    self.data = data
    self.ret = calculate_backtest_return(BO_spread,TTE,signal,data)
    self.daily_return = self.ret.copy()
    self.daily_return.index = self.daily_return.index.date
    self.daily_return = self.daily_return.groupby(self.daily_return.index).sum()
    self.daily_std = np.std(self.daily_return)
    self.IR = np.mean(self.daily_return/self.daily_std)
  def plot_accumulate_return(self):
    self.daily_return.cumsum().plot()

